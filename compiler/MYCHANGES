Submission 5a
=============

Changes we made for enhancing the compiler from level 0 to level 1:

parser.yy and scanner.ll
------------------------

1. Added the lexemes and tokens that we had added for level 1 while coding the interpreter.

ast.hh and ast.cc
-----------------

1. Added classes for Goto_Ast, If_Ast and Comparison_Ast. Wrote methods for these classes. Along with the methods that we had written last time for the interpreter, this time we also wrote methods for compile(), which generates Code_for_Ast objects.

icode.cc and icode.hh
---------------------

1. Added two new intermediate code statement classes Move_IC_Stmt_2 and Move_IC_Stmt_3. The former is for intermediate code statements that have two operands and one result register, like bne, slt, sle, sgt and sge. The latter is for intermediate code statements that have only one operand and no result register. Move_IC_Stmt is for intermediate code statements that have only one operand and one result register.

2. Wrote the methods for the above classes, including print_icode() and print_assembly().

reg-alloc.cc and reg-alloc.hh
-----------------------------

1. Extended the initialize_instruction_table() method of the Machine_Description class by adding the instructions slt, sgt, sle, sge, seq, bne and goto.

2. Added the clause "!used_for_expr_result" to the is_free() method of the Register_Descriptor class. This checks that the register is not being used anywhere else. Only then can it be allocated.


local-environment.cc and local-environment.hh
---------------------------------------------

1. Added result enums (int_result and goto_result) and evaluation functions that we had written while making the interpreter.


Submission 5b
=============

Changes we made for supporting local register allocation for level 1:


ast.cc and ast.hh
-----------------

1. Added compile_and_optimize_ast() functions for each of the classes we added in the previous submission.


reg-alloc.cc and reg-alloc.hh
-----------------------------

1. Added 'c2r' to the Lra_Scenario enum.

2. Added a case for c2r (constant to register) in the optimize_lra() function.

3. Added a function 'get_lra_table_size' that returns the length of the lra_symbol_list for a Register_Descriptor.

4. Modified the 'mc_2m' case to take care of the case when the destination_register already is storing the value for more than one symbol table entry. Specifically, we added another clause in the 'else if' condition which checked that the return value of get_lra_table_size() is <= 1.

5. Added a function to get a reference to the lra_symbol_list of a Register_Descriptor.

6. Modified the function get_new_register to free a register in case lra option is enabled and there are no free registers left at that point in the program. We only free a register if it is holding exactly one symbol table entry. e.g. see 'test_files/ExhaustTemps.ecfg'.


Submission 6a
=============

Changes we made for supporting floating point arithmetic and typecasting:


scanner.ll
----------

1. Added tokens for float and double (merged from our earlier work on the interpreter).

2. Also added tokens for arithmetic operators.


parser.yy
---------

1. Added 'float_value' to the union.

2. Added a token for float numbers (FLOAT).

3. Added production rules and enhanced the existing nonterminals' production rules to capture arithmetic, floating point numbers and typecasting.


reg-alloc.cc and reg-alloc.hh
-----------------------------

1. Modified the signature of the get_new_register() method. Now it takes an integer specifying which kind of register it should get, float or int.

2. Added new Register Descriptors to capture floating point numbers.

3. Added new Instruction Descriptors to capture negation, floating point load/store/immediate load/negation and mtc1/mfc1.


ast.cc and ast.hh
-----------------

1. Modified the compile() functions for Name_Ast, Comparison_Ast to account for the fact that the signature of get_new_register() has changed, as well as the new data type 'float'.

2. Added the Arithmetic_Ast class that we wrote while doing the interpreter, as well as the old methods (print(), evaluate() etc.) and also added a compile() function for it. Similarly, added Typecast_Ast, UnaryMinus_Ast.

3. Added the Arith_Op_Enum that we wrote while doing the interpreter to ast.hh.


icode.cc and icode.hh
---------------------

1. Added a template class for float Const_Opd.

2. In the Tgt_Op enum, added load, store and immediate load for floats (i.e. loadd, stored, imm_loadd respectively). Also added neg and negd for unary minus. Also added mfc1 and mtc1 for typecasting between float and int.


program.cc and program.hh
-------------------------

1. Added calls to setprecision() in the printing functions.


symbol-table.cc
---------------

1. Added support for floats in the print() and get_size_of_value_type() methods of Symbol Table.


Submission 6b
=============

ast.cc and ast.hh
-----------------

1. Modified/added compile_and_optimize_ast() methods of the Assignment_Ast, Name_Ast, Number_Ast, Arithmetic_Ast, Typecast_Ast, UnaryMinus_Ast and Comparison_Ast classes to account for float numbers.

reg-alloc.cc and reg-alloc.hh
-----------------------------

1. In the optimize_lra() method of Lra_Outcome, modified the if conditions in the various switch cases to account for float numbers.



Submission 7a
=============

ast.cc and ast.hh
-----------------
1. Addition of required functions for function_call_ast and their implementation.

reg-alloc.cc and reg-alloc.hh
-----------------------------
1. Few more instructions were added and their definitions as well.

2. Modifications in existing functions to support the function call functionality.

icode.cc and icode.hh
----------------------------
1. New class Stack_mem_Addr_Opd was added.

2. New formats for printing assembly and icode for programs was added. Also their cases in the code section in icode.cc file added.

Parser.yy and scanner.ll
---------------------------
1. Functionality to detect and parse function definitions and calls(with , without arguments) added and verified.

Procedure.cc and Procedure.hh
------------------------------

1. Many new functions to detect errors and correctly compile and parse procedures added.

2. Slight modification in existing code to correctly calculate and print the variable offsets.

Parser.ih
----------
1. Supporting functions and data structures to detect parsing errors.

Symbol_table.cc and Symbol_table.hh
-----------------------------------
1. New funcions to help other implementations in procedure.cc and ast.cc added.






