
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: basic_block_list ->  basic_block basic_block_list
13: basic_block_list ->  basic_block
14: basic_block ('<') ->  '<' NAME INTEGER_NUMBER '>' ':' basic_block_body
15: basic_block_body (RETURN) ->  statement_list RETURN ';'
16: basic_block_body ->  statement_list
17: basic_block_body (RETURN) ->  RETURN ';'
18: statement_list ->  statement statement_list
19: statement_list ->  statement
20: statement (GOTO) ->  GOTO '<' NAME INTEGER_NUMBER '>' ';'
21: statement ->  if_statement
22: statement (';') ->  expression ';'
23: expression ->  assignment_expr
24: expression ->  boolean_expr
25: expression ->  ternary_expr
26: expression ->  variable
27: expression ->  constant
28: expression ('(') ->  '(' expression ')'
29: boolean_expr ->  comparison_expr
30: boolean_expr ->  logical_expr
31: comparison_op ('!') ->  '!' '='
32: comparison_op ('>') ->  '>' '='
33: comparison_op ('=') ->  '=' '='
34: comparison_op ('<') ->  '<' '='
35: comparison_op ('<') ->  '<'
36: comparison_op ('>') ->  '>'
37: comparison_expr ->  expression comparison_op expression
38: logical_op ('&') ->  '&' '&'
39: logical_op ('|') ->  '|' '|'
40: logical_expr ->  expression logical_op expression
41: logical_expr ('!') ->  '!' expression
42: ternary_expr ('?') ->  boolean_expr '?' expression ':' expression
43: assignment_expr ('=') ->  variable '=' expression
44: if_statement ->  if_block
45: if_statement ->  if_block else_block
46: if_block (IF) ->  IF '(' expression ')' statement_list
47: if_block (IF) ->  IF '(' expression ')' '{' statement_list '}'
48: else_block (ELSE) ->  ELSE statement
49: else_block (ELSE) ->  ELSE '{' statement_list '}'
50: variable (NAME) ->  NAME
51: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
52: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: IF
   258: ELSE
   259: GOTO
   260: INTEGER_NUMBER
   261: NAME
   262: RETURN
   263: INTEGER
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    60: '<'
    62: '>'
    58: ':'
    33: '!'
    61: '='
    38: '&'
   124: '|'
    63: '?'


Grammar States: 
State 0:
52: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6


State 1:
52: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 7
  1:   On declaration_statement to state 8
  2:   On NAME to state 5
  3:   On INTEGER to state 6


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 9
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 10


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 11


State 7:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 12
  Reduce by 2: #0001 ->  . 


State 8:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 9:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 13
  1:   On '{' to state 14


State 10:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 15


State 11:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 16


State 12:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 14


State 13:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 14:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 18
  1:   On basic_block_list to state 19
  2:   On declaration_statement to state 4
  3:   On basic_block to state 20
  4:   On INTEGER to state 6
  5:   On '<' to state 21


State 15:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 16:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 17:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 18:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 22
  1:   On declaration_statement to state 8
  2:   On INTEGER to state 6
  Reduce by 7: #0003 ->  . 


State 19:
8: procedure_body -> '{' basic_block_list  . '}' 
  0:   On '}' to state 23


State 20:
12: basic_block_list -> basic_block  . basic_block_list 
13: basic_block_list -> basic_block  . 
  0:   On basic_block_list to state 24
  1:   On basic_block to state 20
  2:   On '<' to state 21
  Reduce by 13: basic_block_list -> basic_block  . 


State 21:
14: basic_block -> '<'  . NAME INTEGER_NUMBER '>' ':' basic_block_body 
  0:   On NAME to state 25


State 22:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 26
  1:   On basic_block to state 20
  2:   On '<' to state 21


State 23:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 24:
12: basic_block_list -> basic_block basic_block_list  . 
  Reduce by 12: basic_block_list -> basic_block basic_block_list  . 


State 25:
14: basic_block -> '<' NAME  . INTEGER_NUMBER '>' ':' basic_block_body 
  0:   On INTEGER_NUMBER to state 27


State 26:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
  0:   On '}' to state 28


State 27:
14: basic_block -> '<' NAME INTEGER_NUMBER  . '>' ':' basic_block_body 
  0:   On '>' to state 29


State 28:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 29:
14: basic_block -> '<' NAME INTEGER_NUMBER '>'  . ':' basic_block_body 
  0:   On ':' to state 30


State 30:
14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':'  . basic_block_body 
  0:   On basic_block_body to state 31
  1:   On statement_list to state 32
  2:   On RETURN to state 33
  3:   On statement to state 34
  4:   On GOTO to state 35
  5:   On if_statement to state 36
  6:   On expression to state 37
  7:   On if_block to state 38
  8:   On assignment_expr to state 39
  9:   On boolean_expr to state 40
  10:   On ternary_expr to state 41
  11:   On variable to state 42
  12:   On constant to state 43
  13:   On '(' to state 44
  14:   On IF to state 45
  15:   On comparison_expr to state 46
  16:   On logical_expr to state 47
  17:   On NAME to state 48
  18:   On INTEGER_NUMBER to state 49
  19:   On '!' to state 50


State 31:
14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':' basic_block_body  . 
  Reduce by 14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':' basic_block_body  . 


State 32:
15: basic_block_body -> statement_list  . RETURN ';' 
16: basic_block_body -> statement_list  . 
  0:   On RETURN to state 51
  Reduce by 16: basic_block_body -> statement_list  . 


State 33:
17: basic_block_body -> RETURN  . ';' 
  0:   On ';' to state 52


State 34:
18: statement_list -> statement  . statement_list 
19: statement_list -> statement  . 
  0:   On statement_list to state 53
  1:   On statement to state 34
  2 (AUTO REMOVED by S/R resolution):   On GOTO to state 35
  3:   On if_statement to state 36
  4:   On expression to state 37
  5:   On if_block to state 38
  6:   On assignment_expr to state 39
  7:   On boolean_expr to state 40
  8:   On ternary_expr to state 41
  9:   On variable to state 42
  10:   On constant to state 43
  11 (AUTO REMOVED by S/R resolution):   On '(' to state 44
  12 (AUTO REMOVED by S/R resolution):   On IF to state 45
  13:   On comparison_expr to state 46
  14:   On logical_expr to state 47
  15 (AUTO REMOVED by S/R resolution):   On NAME to state 48
  16 (AUTO REMOVED by S/R resolution):   On INTEGER_NUMBER to state 49
  17 (AUTO REMOVED by S/R resolution):   On '!' to state 50
  Reduce by 19: statement_list -> statement  . 


State 35:
20: statement -> GOTO  . '<' NAME INTEGER_NUMBER '>' ';' 
  0:   On '<' to state 54


State 36:
21: statement -> if_statement  . 
  Reduce by 21: statement -> if_statement  . 


State 37:
22: statement -> expression  . ';' 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On ';' to state 55
  1:   On comparison_op to state 56
  2:   On logical_op to state 57
  3:   On '!' to state 58
  4:   On '>' to state 59
  5:   On '=' to state 60
  6:   On '<' to state 61
  7:   On '&' to state 62
  8:   On '|' to state 63


State 38:
44: if_statement -> if_block  . 
45: if_statement -> if_block  . else_block 
  0:   On else_block to state 64
  1 (AUTO REMOVED by S/R resolution):   On ELSE to state 65
  Reduce by 44: if_statement -> if_block  . 


State 39:
23: expression -> assignment_expr  . 
  Reduce by 23: expression -> assignment_expr  . 


State 40:
24: expression -> boolean_expr  . 
42: ternary_expr -> boolean_expr  . '?' expression ':' expression 
  0 (AUTO REMOVED by S/R resolution):   On '?' to state 66
  Reduce by 24: expression -> boolean_expr  . 


State 41:
25: expression -> ternary_expr  . 
  Reduce by 25: expression -> ternary_expr  . 


State 42:
26: expression -> variable  . 
43: assignment_expr -> variable  . '=' expression 
  0 (AUTO REMOVED by S/R resolution):   On '=' to state 67
  Reduce by 26: expression -> variable  . 


State 43:
27: expression -> constant  . 
  Reduce by 27: expression -> constant  . 


State 44:
28: expression -> '('  . expression ')' 
  0:   On expression to state 68
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 45:
46: if_block -> IF  . '(' expression ')' statement_list 
47: if_block -> IF  . '(' expression ')' '{' statement_list '}' 
  0:   On '(' to state 69


State 46:
29: boolean_expr -> comparison_expr  . 
  Reduce by 29: boolean_expr -> comparison_expr  . 


State 47:
30: boolean_expr -> logical_expr  . 
  Reduce by 30: boolean_expr -> logical_expr  . 


State 48:
50: variable -> NAME  . 
  Reduce by 50: variable -> NAME  . 


State 49:
51: constant -> INTEGER_NUMBER  . 
  Reduce by 51: constant -> INTEGER_NUMBER  . 


State 50:
41: logical_expr -> '!'  . expression 
  0:   On expression to state 70
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 51:
15: basic_block_body -> statement_list RETURN  . ';' 
  0:   On ';' to state 71


State 52:
17: basic_block_body -> RETURN ';'  . 
  Reduce by 17: basic_block_body -> RETURN ';'  . 


State 53:
18: statement_list -> statement statement_list  . 
  Reduce by 18: statement_list -> statement statement_list  . 


State 54:
20: statement -> GOTO '<'  . NAME INTEGER_NUMBER '>' ';' 
  0:   On NAME to state 72


State 55:
22: statement -> expression ';'  . 
  Reduce by 22: statement -> expression ';'  . 


State 56:
37: comparison_expr -> expression comparison_op  . expression 
  0:   On expression to state 73
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 57:
40: logical_expr -> expression logical_op  . expression 
  0:   On expression to state 74
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 58:
31: comparison_op -> '!'  . '=' 
  0:   On '=' to state 75


State 59:
32: comparison_op -> '>'  . '=' 
36: comparison_op -> '>'  . 
  0:   On '=' to state 76
  Reduce by 36: comparison_op -> '>'  . 


State 60:
33: comparison_op -> '='  . '=' 
  0:   On '=' to state 77


State 61:
34: comparison_op -> '<'  . '=' 
35: comparison_op -> '<'  . 
  0:   On '=' to state 78
  Reduce by 35: comparison_op -> '<'  . 


State 62:
38: logical_op -> '&'  . '&' 
  0:   On '&' to state 79


State 63:
39: logical_op -> '|'  . '|' 
  0:   On '|' to state 80


State 64:
45: if_statement -> if_block else_block  . 
  Reduce by 45: if_statement -> if_block else_block  . 


State 65:
48: else_block -> ELSE  . statement 
49: else_block -> ELSE  . '{' statement_list '}' 
  0:   On statement to state 81
  1:   On '{' to state 82
  2:   On GOTO to state 35
  3:   On if_statement to state 36
  4:   On expression to state 37
  5:   On if_block to state 38
  6:   On assignment_expr to state 39
  7:   On boolean_expr to state 40
  8:   On ternary_expr to state 41
  9:   On variable to state 42
  10:   On constant to state 43
  11:   On '(' to state 44
  12:   On IF to state 45
  13:   On comparison_expr to state 46
  14:   On logical_expr to state 47
  15:   On NAME to state 48
  16:   On INTEGER_NUMBER to state 49
  17:   On '!' to state 50


State 66:
42: ternary_expr -> boolean_expr '?'  . expression ':' expression 
  0:   On expression to state 83
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 67:
43: assignment_expr -> variable '='  . expression 
  0:   On expression to state 84
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 68:
28: expression -> '(' expression  . ')' 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On ')' to state 85
  1:   On comparison_op to state 56
  2:   On logical_op to state 57
  3:   On '!' to state 58
  4:   On '>' to state 59
  5:   On '=' to state 60
  6:   On '<' to state 61
  7:   On '&' to state 62
  8:   On '|' to state 63


State 69:
46: if_block -> IF '('  . expression ')' statement_list 
47: if_block -> IF '('  . expression ')' '{' statement_list '}' 
  0:   On expression to state 86
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 70:
41: logical_expr -> '!' expression  . 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On comparison_op to state 56
  1:   On logical_op to state 57
  2:   On '!' to state 58
  3:   On '>' to state 59
  4:   On '=' to state 60
  5:   On '<' to state 61
  6:   On '&' to state 62
  7:   On '|' to state 63
  Reduce by 41: logical_expr -> '!' expression  . 
Solved SR CONFLICT on '!': shift to state 58, removed '!' from LA-set of rule 41)
Solved SR CONFLICT on '>': shift to state 59, removed '>' from LA-set of rule 41)
Solved SR CONFLICT on '>': shift to state 59, removed '>' from LA-set of rule 41)
Solved SR CONFLICT on '=': shift to state 60, removed '=' from LA-set of rule 41)
Solved SR CONFLICT on '<': shift to state 61, removed '<' from LA-set of rule 41)
Solved SR CONFLICT on '<': shift to state 61, removed '<' from LA-set of rule 41)
Solved SR CONFLICT on '&': shift to state 62, removed '&' from LA-set of rule 41)
Solved SR CONFLICT on '|': shift to state 63, removed '|' from LA-set of rule 41)


State 71:
15: basic_block_body -> statement_list RETURN ';'  . 
  Reduce by 15: basic_block_body -> statement_list RETURN ';'  . 


State 72:
20: statement -> GOTO '<' NAME  . INTEGER_NUMBER '>' ';' 
  0:   On INTEGER_NUMBER to state 87


State 73:
37: comparison_expr -> expression comparison_op expression  . 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On comparison_op to state 56
  1:   On logical_op to state 57
  2 (AUTO REMOVED by S/R resolution):   On '!' to state 58
  3 (AUTO REMOVED by S/R resolution):   On '>' to state 59
  4 (AUTO REMOVED by S/R resolution):   On '=' to state 60
  5 (AUTO REMOVED by S/R resolution):   On '<' to state 61
  6 (AUTO REMOVED by S/R resolution):   On '&' to state 62
  7 (AUTO REMOVED by S/R resolution):   On '|' to state 63
  Reduce by 37: comparison_expr -> expression comparison_op expression  . 


State 74:
40: logical_expr -> expression logical_op expression  . 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On comparison_op to state 56
  1:   On logical_op to state 57
  2 (AUTO REMOVED by S/R resolution):   On '!' to state 58
  3 (AUTO REMOVED by S/R resolution):   On '>' to state 59
  4 (AUTO REMOVED by S/R resolution):   On '=' to state 60
  5 (AUTO REMOVED by S/R resolution):   On '<' to state 61
  6 (AUTO REMOVED by S/R resolution):   On '&' to state 62
  7 (AUTO REMOVED by S/R resolution):   On '|' to state 63
  Reduce by 40: logical_expr -> expression logical_op expression  . 


State 75:
31: comparison_op -> '!' '='  . 
  Reduce by 31: comparison_op -> '!' '='  . 


State 76:
32: comparison_op -> '>' '='  . 
  Reduce by 32: comparison_op -> '>' '='  . 


State 77:
33: comparison_op -> '=' '='  . 
  Reduce by 33: comparison_op -> '=' '='  . 


State 78:
34: comparison_op -> '<' '='  . 
  Reduce by 34: comparison_op -> '<' '='  . 


State 79:
38: logical_op -> '&' '&'  . 
  Reduce by 38: logical_op -> '&' '&'  . 


State 80:
39: logical_op -> '|' '|'  . 
  Reduce by 39: logical_op -> '|' '|'  . 


State 81:
48: else_block -> ELSE statement  . 
  Reduce by 48: else_block -> ELSE statement  . 


State 82:
49: else_block -> ELSE '{'  . statement_list '}' 
  0:   On statement_list to state 88
  1:   On statement to state 34
  2:   On GOTO to state 35
  3:   On if_statement to state 36
  4:   On expression to state 37
  5:   On if_block to state 38
  6:   On assignment_expr to state 39
  7:   On boolean_expr to state 40
  8:   On ternary_expr to state 41
  9:   On variable to state 42
  10:   On constant to state 43
  11:   On '(' to state 44
  12:   On IF to state 45
  13:   On comparison_expr to state 46
  14:   On logical_expr to state 47
  15:   On NAME to state 48
  16:   On INTEGER_NUMBER to state 49
  17:   On '!' to state 50


State 83:
42: ternary_expr -> boolean_expr '?' expression  . ':' expression 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On ':' to state 89
  1:   On comparison_op to state 56
  2:   On logical_op to state 57
  3:   On '!' to state 58
  4:   On '>' to state 59
  5:   On '=' to state 60
  6:   On '<' to state 61
  7:   On '&' to state 62
  8:   On '|' to state 63


State 84:
43: assignment_expr -> variable '=' expression  . 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On comparison_op to state 56
  1:   On logical_op to state 57
  2:   On '!' to state 58
  3:   On '>' to state 59
  4:   On '=' to state 60
  5:   On '<' to state 61
  6:   On '&' to state 62
  7:   On '|' to state 63
  Reduce by 43: assignment_expr -> variable '=' expression  . 
Solved SR CONFLICT on '!': shift to state 58, removed '!' from LA-set of rule 43)
Solved SR CONFLICT on '>': shift to state 59, removed '>' from LA-set of rule 43)
Solved SR CONFLICT on '>': shift to state 59, removed '>' from LA-set of rule 43)
Solved SR CONFLICT on '=': shift to state 60, removed '=' from LA-set of rule 43)
Solved SR CONFLICT on '<': shift to state 61, removed '<' from LA-set of rule 43)
Solved SR CONFLICT on '<': shift to state 61, removed '<' from LA-set of rule 43)
Solved SR CONFLICT on '&': shift to state 62, removed '&' from LA-set of rule 43)
Solved SR CONFLICT on '|': shift to state 63, removed '|' from LA-set of rule 43)


State 85:
28: expression -> '(' expression ')'  . 
  Reduce by 28: expression -> '(' expression ')'  . 


State 86:
46: if_block -> IF '(' expression  . ')' statement_list 
47: if_block -> IF '(' expression  . ')' '{' statement_list '}' 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On ')' to state 90
  1:   On comparison_op to state 56
  2:   On logical_op to state 57
  3:   On '!' to state 58
  4:   On '>' to state 59
  5:   On '=' to state 60
  6:   On '<' to state 61
  7:   On '&' to state 62
  8:   On '|' to state 63


State 87:
20: statement -> GOTO '<' NAME INTEGER_NUMBER  . '>' ';' 
  0:   On '>' to state 91


State 88:
49: else_block -> ELSE '{' statement_list  . '}' 
  0:   On '}' to state 92


State 89:
42: ternary_expr -> boolean_expr '?' expression ':'  . expression 
  0:   On expression to state 93
  1:   On assignment_expr to state 39
  2:   On boolean_expr to state 40
  3:   On ternary_expr to state 41
  4:   On variable to state 42
  5:   On constant to state 43
  6:   On '(' to state 44
  7:   On comparison_expr to state 46
  8:   On logical_expr to state 47
  9:   On NAME to state 48
  10:   On INTEGER_NUMBER to state 49
  11:   On '!' to state 50


State 90:
46: if_block -> IF '(' expression ')'  . statement_list 
47: if_block -> IF '(' expression ')'  . '{' statement_list '}' 
  0:   On statement_list to state 94
  1:   On '{' to state 95
  2:   On statement to state 34
  3:   On GOTO to state 35
  4:   On if_statement to state 36
  5:   On expression to state 37
  6:   On if_block to state 38
  7:   On assignment_expr to state 39
  8:   On boolean_expr to state 40
  9:   On ternary_expr to state 41
  10:   On variable to state 42
  11:   On constant to state 43
  12:   On '(' to state 44
  13:   On IF to state 45
  14:   On comparison_expr to state 46
  15:   On logical_expr to state 47
  16:   On NAME to state 48
  17:   On INTEGER_NUMBER to state 49
  18:   On '!' to state 50


State 91:
20: statement -> GOTO '<' NAME INTEGER_NUMBER '>'  . ';' 
  0:   On ';' to state 96


State 92:
49: else_block -> ELSE '{' statement_list '}'  . 
  Reduce by 49: else_block -> ELSE '{' statement_list '}'  . 


State 93:
42: ternary_expr -> boolean_expr '?' expression ':' expression  . 
37: comparison_expr -> expression  . comparison_op expression 
40: logical_expr -> expression  . logical_op expression 
  0:   On comparison_op to state 56
  1:   On logical_op to state 57
  2:   On '!' to state 58
  3:   On '>' to state 59
  4:   On '=' to state 60
  5:   On '<' to state 61
  6:   On '&' to state 62
  7:   On '|' to state 63
  Reduce by 42: ternary_expr -> boolean_expr '?' expression ':' expression  . 
Solved SR CONFLICT on '!': shift to state 58, removed '!' from LA-set of rule 42)
Solved SR CONFLICT on '>': shift to state 59, removed '>' from LA-set of rule 42)
Solved SR CONFLICT on '>': shift to state 59, removed '>' from LA-set of rule 42)
Solved SR CONFLICT on '=': shift to state 60, removed '=' from LA-set of rule 42)
Solved SR CONFLICT on '<': shift to state 61, removed '<' from LA-set of rule 42)
Solved SR CONFLICT on '<': shift to state 61, removed '<' from LA-set of rule 42)
Solved SR CONFLICT on '&': shift to state 62, removed '&' from LA-set of rule 42)
Solved SR CONFLICT on '|': shift to state 63, removed '|' from LA-set of rule 42)


State 94:
46: if_block -> IF '(' expression ')' statement_list  . 
  Reduce by 46: if_block -> IF '(' expression ')' statement_list  . 


State 95:
47: if_block -> IF '(' expression ')' '{'  . statement_list '}' 
  0:   On statement_list to state 97
  1:   On statement to state 34
  2:   On GOTO to state 35
  3:   On if_statement to state 36
  4:   On expression to state 37
  5:   On if_block to state 38
  6:   On assignment_expr to state 39
  7:   On boolean_expr to state 40
  8:   On ternary_expr to state 41
  9:   On variable to state 42
  10:   On constant to state 43
  11:   On '(' to state 44
  12:   On IF to state 45
  13:   On comparison_expr to state 46
  14:   On logical_expr to state 47
  15:   On NAME to state 48
  16:   On INTEGER_NUMBER to state 49
  17:   On '!' to state 50


State 96:
20: statement -> GOTO '<' NAME INTEGER_NUMBER '>' ';'  . 
  Reduce by 20: statement -> GOTO '<' NAME INTEGER_NUMBER '>' ';'  . 


State 97:
47: if_block -> IF '(' expression ')' '{' statement_list  . '}' 
  0:   On '}' to state 98


State 98:
47: if_block -> IF '(' expression ')' '{' statement_list '}'  . 
  Reduce by 47: if_block -> IF '(' expression ')' '{' statement_list '}'  . 



