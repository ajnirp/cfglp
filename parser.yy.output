
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: basic_block_list ->  basic_block basic_block_list
13: basic_block_list ->  basic_block
14: basic_block ('<') ->  '<' NAME INTEGER_NUMBER '>' ':' basic_block_body
15: basic_block_body (RETURN) ->  statement_list RETURN ';'
16: basic_block_body ->  statement_list
17: basic_block_body (RETURN) ->  RETURN ';'
18: statement_list ->  statement statement_list
19: statement_list ->  statement
20: statement ->  goto_statement
21: statement (IF) ->  IF '(' comparison_expr ')' goto_statement ELSE goto_statement
22: statement (';') ->  expression ';'
23: expression ->  assignment_expr
24: expression ->  comparison_expr
25: expression ->  variable
26: expression ->  constant
27: expression ('(') ->  '(' expression ')'
28: comparison_op ('!') ->  '!' '='
29: comparison_op ('>') ->  '>' '='
30: comparison_op ('<') ->  '<' '='
31: comparison_op ('=') ->  '=' '='
32: comparison_op ('<') ->  '<'
33: comparison_op ('>') ->  '>'
34: comparison_expr ->  variable comparison_op variable
35: comparison_expr ->  variable comparison_op constant
36: assignment_expr ('=') ->  variable '=' expression
37: goto_statement (GOTO) ->  GOTO '<' NAME INTEGER_NUMBER '>' ';'
38: variable (NAME) ->  NAME
39: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
40: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: NAME
   259: RETURN
   260: INTEGER
   261: IF
   262: ELSE
   263: GOTO
    60: '<'
    62: '>'
    61: '='
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'
    33: '!'


Grammar States: 
State 0:
40: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6


State 1:
40: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 7
  1:   On declaration_statement to state 8
  2:   On NAME to state 5
  3:   On INTEGER to state 6


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 9
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 10


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 11


State 7:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 12
  Reduce by 2: #0001 ->  . 


State 8:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 9:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 13
  1:   On '{' to state 14


State 10:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 15


State 11:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 16


State 12:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 14


State 13:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 14:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 18
  1:   On basic_block_list to state 19
  2:   On declaration_statement to state 4
  3:   On basic_block to state 20
  4:   On INTEGER to state 6
  5:   On '<' to state 21


State 15:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 16:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 17:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 18:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 22
  1:   On declaration_statement to state 8
  2:   On INTEGER to state 6
  Reduce by 7: #0003 ->  . 


State 19:
8: procedure_body -> '{' basic_block_list  . '}' 
  0:   On '}' to state 23


State 20:
12: basic_block_list -> basic_block  . basic_block_list 
13: basic_block_list -> basic_block  . 
  0:   On basic_block_list to state 24
  1:   On basic_block to state 20
  2:   On '<' to state 21
  Reduce by 13: basic_block_list -> basic_block  . 


State 21:
14: basic_block -> '<'  . NAME INTEGER_NUMBER '>' ':' basic_block_body 
  0:   On NAME to state 25


State 22:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 26
  1:   On basic_block to state 20
  2:   On '<' to state 21


State 23:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 24:
12: basic_block_list -> basic_block basic_block_list  . 
  Reduce by 12: basic_block_list -> basic_block basic_block_list  . 


State 25:
14: basic_block -> '<' NAME  . INTEGER_NUMBER '>' ':' basic_block_body 
  0:   On INTEGER_NUMBER to state 27


State 26:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
  0:   On '}' to state 28


State 27:
14: basic_block -> '<' NAME INTEGER_NUMBER  . '>' ':' basic_block_body 
  0:   On '>' to state 29


State 28:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 29:
14: basic_block -> '<' NAME INTEGER_NUMBER '>'  . ':' basic_block_body 
  0:   On ':' to state 30


State 30:
14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':'  . basic_block_body 
  0:   On basic_block_body to state 31
  1:   On statement_list to state 32
  2:   On RETURN to state 33
  3:   On statement to state 34
  4:   On goto_statement to state 35
  5:   On IF to state 36
  6:   On expression to state 37
  7:   On GOTO to state 38
  8:   On assignment_expr to state 39
  9:   On comparison_expr to state 40
  10:   On variable to state 41
  11:   On constant to state 42
  12:   On '(' to state 43
  13:   On NAME to state 44
  14:   On INTEGER_NUMBER to state 45


State 31:
14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':' basic_block_body  . 
  Reduce by 14: basic_block -> '<' NAME INTEGER_NUMBER '>' ':' basic_block_body  . 


State 32:
15: basic_block_body -> statement_list  . RETURN ';' 
16: basic_block_body -> statement_list  . 
  0:   On RETURN to state 46
  Reduce by 16: basic_block_body -> statement_list  . 


State 33:
17: basic_block_body -> RETURN  . ';' 
  0:   On ';' to state 47


State 34:
18: statement_list -> statement  . statement_list 
19: statement_list -> statement  . 
  0:   On statement_list to state 48
  1:   On statement to state 34
  2:   On goto_statement to state 35
  3:   On IF to state 36
  4:   On expression to state 37
  5:   On GOTO to state 38
  6:   On assignment_expr to state 39
  7:   On comparison_expr to state 40
  8:   On variable to state 41
  9:   On constant to state 42
  10:   On '(' to state 43
  11:   On NAME to state 44
  12:   On INTEGER_NUMBER to state 45
  Reduce by 19: statement_list -> statement  . 


State 35:
20: statement -> goto_statement  . 
  Reduce by 20: statement -> goto_statement  . 


State 36:
21: statement -> IF  . '(' comparison_expr ')' goto_statement ELSE goto_statement 
  0:   On '(' to state 49


State 37:
22: statement -> expression  . ';' 
  0:   On ';' to state 50


State 38:
37: goto_statement -> GOTO  . '<' NAME INTEGER_NUMBER '>' ';' 
  0:   On '<' to state 51


State 39:
23: expression -> assignment_expr  . 
  Reduce by 23: expression -> assignment_expr  . 


State 40:
24: expression -> comparison_expr  . 
  Reduce by 24: expression -> comparison_expr  . 


State 41:
25: expression -> variable  . 
36: assignment_expr -> variable  . '=' expression 
34: comparison_expr -> variable  . comparison_op variable 
35: comparison_expr -> variable  . comparison_op constant 
  0:   On '=' to state 52
  1:   On comparison_op to state 53
  2:   On '!' to state 54
  3:   On '>' to state 55
  4:   On '<' to state 56
  Reduce by 25: expression -> variable  . 


State 42:
26: expression -> constant  . 
  Reduce by 26: expression -> constant  . 


State 43:
27: expression -> '('  . expression ')' 
  0:   On expression to state 57
  1:   On assignment_expr to state 39
  2:   On comparison_expr to state 40
  3:   On variable to state 41
  4:   On constant to state 42
  5:   On '(' to state 43
  6:   On NAME to state 44
  7:   On INTEGER_NUMBER to state 45


State 44:
38: variable -> NAME  . 
  Reduce by 38: variable -> NAME  . 


State 45:
39: constant -> INTEGER_NUMBER  . 
  Reduce by 39: constant -> INTEGER_NUMBER  . 


State 46:
15: basic_block_body -> statement_list RETURN  . ';' 
  0:   On ';' to state 58


State 47:
17: basic_block_body -> RETURN ';'  . 
  Reduce by 17: basic_block_body -> RETURN ';'  . 


State 48:
18: statement_list -> statement statement_list  . 
  Reduce by 18: statement_list -> statement statement_list  . 


State 49:
21: statement -> IF '('  . comparison_expr ')' goto_statement ELSE goto_statement 
  0:   On comparison_expr to state 59
  1:   On variable to state 60
  2:   On NAME to state 44


State 50:
22: statement -> expression ';'  . 
  Reduce by 22: statement -> expression ';'  . 


State 51:
37: goto_statement -> GOTO '<'  . NAME INTEGER_NUMBER '>' ';' 
  0:   On NAME to state 61


State 52:
36: assignment_expr -> variable '='  . expression 
31: comparison_op -> '='  . '=' 
  0:   On expression to state 62
  1:   On '=' to state 63
  2:   On assignment_expr to state 39
  3:   On comparison_expr to state 40
  4:   On variable to state 41
  5:   On constant to state 42
  6:   On '(' to state 43
  7:   On NAME to state 44
  8:   On INTEGER_NUMBER to state 45


State 53:
34: comparison_expr -> variable comparison_op  . variable 
35: comparison_expr -> variable comparison_op  . constant 
  0:   On variable to state 64
  1:   On constant to state 65
  2:   On NAME to state 44
  3:   On INTEGER_NUMBER to state 45


State 54:
28: comparison_op -> '!'  . '=' 
  0:   On '=' to state 66


State 55:
29: comparison_op -> '>'  . '=' 
33: comparison_op -> '>'  . 
  0:   On '=' to state 67
  Reduce by 33: comparison_op -> '>'  . 


State 56:
30: comparison_op -> '<'  . '=' 
32: comparison_op -> '<'  . 
  0:   On '=' to state 68
  Reduce by 32: comparison_op -> '<'  . 


State 57:
27: expression -> '(' expression  . ')' 
  0:   On ')' to state 69


State 58:
15: basic_block_body -> statement_list RETURN ';'  . 
  Reduce by 15: basic_block_body -> statement_list RETURN ';'  . 


State 59:
21: statement -> IF '(' comparison_expr  . ')' goto_statement ELSE goto_statement 
  0:   On ')' to state 70


State 60:
34: comparison_expr -> variable  . comparison_op variable 
35: comparison_expr -> variable  . comparison_op constant 
  0:   On comparison_op to state 53
  1:   On '!' to state 54
  2:   On '>' to state 55
  3:   On '<' to state 56
  4:   On '=' to state 71


State 61:
37: goto_statement -> GOTO '<' NAME  . INTEGER_NUMBER '>' ';' 
  0:   On INTEGER_NUMBER to state 72


State 62:
36: assignment_expr -> variable '=' expression  . 
  Reduce by 36: assignment_expr -> variable '=' expression  . 


State 63:
31: comparison_op -> '=' '='  . 
  Reduce by 31: comparison_op -> '=' '='  . 


State 64:
34: comparison_expr -> variable comparison_op variable  . 
  Reduce by 34: comparison_expr -> variable comparison_op variable  . 


State 65:
35: comparison_expr -> variable comparison_op constant  . 
  Reduce by 35: comparison_expr -> variable comparison_op constant  . 


State 66:
28: comparison_op -> '!' '='  . 
  Reduce by 28: comparison_op -> '!' '='  . 


State 67:
29: comparison_op -> '>' '='  . 
  Reduce by 29: comparison_op -> '>' '='  . 


State 68:
30: comparison_op -> '<' '='  . 
  Reduce by 30: comparison_op -> '<' '='  . 


State 69:
27: expression -> '(' expression ')'  . 
  Reduce by 27: expression -> '(' expression ')'  . 


State 70:
21: statement -> IF '(' comparison_expr ')'  . goto_statement ELSE goto_statement 
  0:   On goto_statement to state 73
  1:   On GOTO to state 38


State 71:
31: comparison_op -> '='  . '=' 
  0:   On '=' to state 63


State 72:
37: goto_statement -> GOTO '<' NAME INTEGER_NUMBER  . '>' ';' 
  0:   On '>' to state 74


State 73:
21: statement -> IF '(' comparison_expr ')' goto_statement  . ELSE goto_statement 
  0:   On ELSE to state 75


State 74:
37: goto_statement -> GOTO '<' NAME INTEGER_NUMBER '>'  . ';' 
  0:   On ';' to state 76


State 75:
21: statement -> IF '(' comparison_expr ')' goto_statement ELSE  . goto_statement 
  0:   On goto_statement to state 77
  1:   On GOTO to state 38


State 76:
37: goto_statement -> GOTO '<' NAME INTEGER_NUMBER '>' ';'  . 
  Reduce by 37: goto_statement -> GOTO '<' NAME INTEGER_NUMBER '>' ';'  . 


State 77:
21: statement -> IF '(' comparison_expr ')' goto_statement ELSE goto_statement  . 
  Reduce by 21: statement -> IF '(' comparison_expr ')' goto_statement ELSE goto_statement  . 



